import { useState, useEffect } from 'react';
import { 
  Home, 
  Search, 
  BookOpen, 
  User, 
  Bell, 
  ChevronRight, 
  Play, 
  CheckCircle, 
  ArrowLeft,
  Award,
  Clock,
  FileText,
  Download,
  MessageSquare,
  Star,
  BarChart2,
  Menu,
  X
} from 'lucide-react';

export default function ELearningPlatform() {
  const [activeScreen, setActiveScreen] = useState('onboarding');
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [videoProgress, setVideoProgress] = useState(0);
  const [selectedCourse, setSelectedCourse] = useState(null);
  const [selectedLesson, setSelectedLesson] = useState(null);
  const [completedLessons, setCompletedLessons] = useState([]);
  const [userInterests, setUserInterests] = useState([]);
  const [onboardingStep, setOnboardingStep] = useState(1);

  // Simulate video progress
  useEffect(() => {
    if (activeScreen === 'lesson' && selectedLesson) {
      const interval = setInterval(() => {
        setVideoProgress(prev => {
          if (prev < 100) {
            return prev + 0.5;
          } else {
            clearInterval(interval);
            if (!completedLessons.includes(selectedLesson.id)) {
              setCompletedLessons(prev => [...prev, selectedLesson.id]);
            }
            return prev;
          }
        });
      }, 200);
      
      return () => clearInterval(interval);
    }
  }, [activeScreen, selectedLesson]);

  const courses = [
    {
      id: 1,
      title: "Web Development Fundamentals",
      instructor: "Sarah Johnson",
      category: "Programming",
      level: "Beginner",
      duration: "10 hours",
      rating: 4.8,
      enrolled: 15482,
      progress: 25,
      image: "/api/placeholder/400/250",
      description: "Learn the basics of HTML, CSS, and JavaScript to build your first website from scratch.",
      tags: ["web", "coding", "html", "css", "javascript"]
    },
    {
      id: 2,
      title: "Data Science Essentials",
      instructor: "Michael Chen",
      category: "Data Science",
      level: "Intermediate",
      duration: "15 hours",
      rating: 4.7,
      enrolled: 8923,
      progress: 40,
      image: "/api/placeholder/400/250",
      description: "Master the fundamentals of data analysis using Python and popular libraries.",
      tags: ["data", "python", "analysis", "statistics"]
    },
    {
      id: 3,
      title: "UX Design Principles",
      instructor: "Alex Rivera",
      category: "Design",
      level: "Beginner",
      duration: "8 hours",
      rating: 4.9,
      enrolled: 10342,
      progress: 60,
      image: "/api/placeholder/400/250",
      description: "Learn design thinking and create user-centered digital experiences.",
      tags: ["design", "ux", "user experience", "wireframing"]
    },
    {
      id: 4,
      title: "Advanced JavaScript",
      instructor: "Priya Sharma",
      category: "Programming",
      level: "Advanced",
      duration: "12 hours",
      rating: 4.6,
      enrolled: 7254,
      progress: 10,
      image: "/api/placeholder/400/250",
      description: "Master modern JavaScript techniques, async programming, and frameworks.",
      tags: ["javascript", "es6", "frameworks", "advanced"]
    }
  ];

  const lessons = [
    {
      id: 101,
      courseId: 1,
      title: "Introduction to HTML",
      duration: "45 minutes",
      type: "video",
      description: "Learn about HTML tags, document structure, and basic elements.",
      resources: ["HTML Cheat Sheet", "Starter Code"],
      thumbnail: "/api/placeholder/300/200"
    },
    {
      id: 102,
      courseId: 1,
      title: "CSS Styling Basics",
      duration: "55 minutes",
      type: "video",
      description: "Understand CSS selectors, properties, and how to style HTML elements.",
      resources: ["CSS Reference Guide", "Style Examples"],
      thumbnail: "/api/placeholder/300/200"
    },
    {
      id: 103,
      courseId: 1,
      title: "JavaScript Fundamentals",
      duration: "65 minutes",
      type: "video",
      description: "Get started with JavaScript syntax, variables, and functions.",
      resources: ["JavaScript Basics PDF", "Practice Exercises"],
      thumbnail: "/api/placeholder/300/200"
    },
    {
      id: 104,
      courseId: 1,
      title: "Building Your First Webpage",
      duration: "50 minutes",
      type: "project",
      description: "Apply what you've learned to create a complete webpage from scratch.",
      resources: ["Project Requirements", "Example Solution"],
      thumbnail: "/api/placeholder/300/200"
    }
  ];

  const interestCategories = [
    { id: 1, name: "Programming", icon: "💻" },
    { id: 2, name: "Business", icon: "📊" },
    { id: 3, name: "Design", icon: "🎨" },
    { id: 4, name: "Data Science", icon: "📈" },
    { id: 5, name: "Marketing", icon: "📱" },
    { id: 6, name: "Photography", icon: "📷" },
    { id: 7, name: "Music", icon: "🎵" },
    { id: 8, name: "Writing", icon: "✍️" }
  ];

  const toggleInterest = (id) => {
    if (userInterests.includes(id)) {
      setUserInterests(userInterests.filter(interest => interest !== id));
    } else {
      setUserInterests([...userInterests, id]);
    }
  };

  const handleNextOnboarding = () => {
    if (onboardingStep < 3) {
      setOnboardingStep(onboardingStep + 1);
    } else {
      setActiveScreen('home');
    }
  };

  const handleCourseSelect = (course) => {
    setSelectedCourse(course);
    setActiveScreen('courseDetail');
  };

  const handleLessonSelect = (lesson) => {
    setSelectedLesson(lesson);
    setVideoProgress(0);
    setActiveScreen('lesson');
  };

  const calculateCourseProgress = (courseId) => {
    const courseLessons = lessons.filter(lesson => lesson.courseId === courseId);
    const completed = completedLessons.filter(lessonId => 
      courseLessons.find(l => l.id === lessonId)
    ).length;
    
    return Math.round((completed / courseLessons.length) * 100) || 0;
  };

  const OnboardingScreen = () => (
    <div className="p-6 max-w-md mx-auto">
      {onboardingStep === 1 && (
        <div className="text-center">
          <div className="w-20 h-20 bg-blue-500 rounded-full flex items-center justify-center text-white text-3xl mx-auto mb-6">
            👋
          </div>
          <h1 className="text-2xl font-bold mb-4">Welcome to LearnSphere</h1>
          <p className="text-gray-600 mb-8">Let's personalize your learning experience to help you achieve your goals.</p>
          <button 
            className="bg-blue-500 text-white px-6 py-3 rounded-lg font-medium w-full"
            onClick={handleNextOnboarding}
          >
            Get Started
          </button>
        </div>
      )}
      
      {onboardingStep === 2 && (
        <div>
          <h2 className="text-xl font-bold mb-6">What topics interest you?</h2>
          <p className="text-gray-600 mb-6">Select all that apply. We'll use this to customize your experience.</p>
          
          <div className="grid grid-cols-2 gap-3 mb-8">
            {interestCategories.map(category => (
              <div 
                key={category.id}
                className={`border rounded-lg p-4 cursor-pointer transition-all ${
                  userInterests.includes(category.id) 
                    ? 'border-blue-500 bg-blue-50' 
                    : 'border-gray-200 hover:border-gray-300'
                }`}
                onClick={() => toggleInterest(category.id)}
              >
                <div className="flex items-center">
                  <span className="text-2xl mr-2">{category.icon}</span>
                  <span>{category.name}</span>
                </div>
              </div>
            ))}
          </div>
          
          <button 
            className="bg-blue-500 text-white px-6 py-3 rounded-lg font-medium w-full"
            onClick={handleNextOnboarding}
          >
            Continue
          </button>
        </div>
      )}
      
      {onboardingStep === 3 && (
        <div>
          <h2 className="text-xl font-bold mb-6">Set your learning goals</h2>
          
          <div className="mb-6">
            <label className="block text-gray-700 mb-2">What do you want to achieve?</label>
            <select className="w-full p-3 border border-gray-300 rounded-lg">
              <option>Learn new skills for my job</option>
              <option>Change careers</option>
              <option>Personal interest</option>
              <option>Academic requirements</option>
            </select>
          </div>
          
          <div className="mb-6">
            <label className="block text-gray-700 mb-2">How much time can you dedicate weekly?</label>
            <select className="w-full p-3 border border-gray-300 rounded-lg">
              <option>1-2 hours</option>
              <option>3-5 hours</option>
              <option>5-10 hours</option>
              <option>10+ hours</option>
            </select>
          </div>
          
          <div className="mb-8">
            <label className="block text-gray-700 mb-2">Learning preference</label>
            <select className="w-full p-3 border border-gray-300 rounded-lg">
              <option>Video lectures</option>
              <option>Reading materials</option>
              <option>Interactive exercises</option>
              <option>Projects and applications</option>
            </select>
          </div>
          
          <button 
            className="bg-blue-500 text-white px-6 py-3 rounded-lg font-medium w-full"
            onClick={handleNextOnboarding}
          >
            Start Learning
          </button>
        </div>
      )}
      
      <div className="flex justify-center mt-6">
        <div className={`w-3 h-3 rounded-full mx-1 ${onboardingStep === 1 ? 'bg-blue-500' : 'bg-gray-300'}`}></div>
        <div className={`w-3 h-3 rounded-full mx-1 ${onboardingStep === 2 ? 'bg-blue-500' : 'bg-gray-300'}`}></div>
        <div className={`w-3 h-3 rounded-full mx-1 ${onboardingStep === 3 ? 'bg-blue-500' : 'bg-gray-300'}`}></div>
      </div>
    </div>
  );

  const HomeScreen = () => (
    <div className="p-4 pb-20">
      <div className="flex justify-between items-center mb-6">
        <div>
          <h1 className="text-2xl font-bold">Hi, Alex!</h1>
          <p className="text-gray-600">Continue your learning journey</p>
        </div>
        <div className="relative">
          <Bell size={24} className="text-gray-600" />
          <span className="absolute top-0 right-0 w-2 h-2 bg-red-500 rounded-full"></span>
        </div>
      </div>
      
      {/* Continue Learning Section */}
      <div className="mb-8">
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-lg font-semibold">Continue Learning</h2>
          <span className="text-blue-500 text-sm">See All</span>
        </div>
        
        <div className="bg-white rounded-lg shadow-sm p-4 mb-4">
          <div className="flex mb-3">
            <img 
              src="/api/placeholder/120/80" 
              alt="Course thumbnail" 
              className="rounded-md w-20 h-14 object-cover mr-3" 
            />
            <div className="flex-1">
              <h3 className="font-medium">Web Development Fundamentals</h3>
              <p className="text-sm text-gray-500">45 minutes left</p>
            </div>
          </div>
          
          <div className="mb-3">
            <div className="relative pt-1">
              <div className="flex items-center justify-between">
                <div>
                  <span className="text-xs font-semibold inline-block text-blue-500">
                    25% Complete
                  </span>
                </div>
                <div className="text-right">
                  <span className="text-xs font-semibold inline-block text-gray-500">
                    Lesson 2 of 8
                  </span>
                </div>
              </div>
              <div className="overflow-hidden h-2 mt-1 text-xs flex rounded bg-gray-200">
                <div 
                  className="bg-blue-500 rounded" 
                  style={{ width: "25%" }}
                ></div>
              </div>
            </div>
          </div>
          
          <button 
            className="bg-blue-500 text-white px-4 py-2 rounded-lg text-sm font-medium w-full flex items-center justify-center"
            onClick={() => {
              setSelectedCourse(courses[0]);
              setSelectedLesson(lessons[1]);
              setActiveScreen('lesson');
            }}
          >
            <Play size={16} className="mr-2" />
            Resume Learning
          </button>
        </div>
      </div>
      
      {/* Recommended Courses */}
      <div className="mb-8">
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-lg font-semibold">Recommended for You</h2>
          <span className="text-blue-500 text-sm">See All</span>
        </div>
        
        <div className="flex overflow-x-auto pb-4 -mx-4 px-4 space-x-4">
          {courses.map(course => (
            <div 
              key={course.id}
              className="bg-white rounded-lg shadow-sm min-w-[250px] flex-shrink-0 cursor-pointer"
              onClick={() => handleCourseSelect(course)}
            >
              <img 
                src={course.image} 
                alt={course.title} 
                className="w-full h-32 object-cover rounded-t-lg" 
              />
              <div className="p-3">
                <span className="text-xs font-medium text-blue-500 bg-blue-50 px-2 py-1 rounded-full">{course.category}</span>
                <h3 className="font-medium mt-2 line-clamp-2">{course.title}</h3>
                <p className="text-sm text-gray-500 mt-1">{course.instructor}</p>
                <div className="flex items-center mt-2">
                  <Star size={14} className="text-yellow-400 fill-current" />
                  <span className="text-sm ml-1">{course.rating}</span>
                  <span className="text-sm text-gray-500 ml-3">{course.duration}</span>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
      
      {/* Categories */}
      <div>
        <h2 className="text-lg font-semibold mb-4">Browse Categories</h2>
        <div className="grid grid-cols-2 gap-3">
          {interestCategories.filter(cat => userInterests.includes(cat.id)).map(category => (
            <div 
              key={category.id}
              className="bg-white rounded-lg shadow-sm p-4 flex items-center cursor-pointer"
            >
              <span className="text-2xl mr-3">{category.icon}</span>
              <span className="font-medium">{category.name}</span>
            </div>
          ))}
        </div>
      </div>
    </div>
  );

  const CourseDetailScreen = () => {
    if (!selectedCourse) return null;
    
    return (
      <div className="pb-20">
        <div className="relative">
          <img 
            src={selectedCourse.image} 
            alt={selectedCourse.title} 
            className="w-full h-48 object-cover" 
          />
          <button 
            className="absolute top-4 left-4 bg-white rounded-full p-2"
            onClick={() => setActiveScreen('home')}
          >
            <ArrowLeft size={20} />
          </button>
        </div>
        
        <div className="p-4">
          <span className="text-sm font-medium text-blue-500 bg-blue-50 px-3 py-1 rounded-full">{selectedCourse.level}</span>
          <h1 className="text-xl font-bold mt-3">{selectedCourse.title}</h1>
          <p className="text-gray-600 mt-1">By {selectedCourse.instructor}</p>
          
          <div className="flex items-center mt-4 space-x-4">
            <div className="flex items-center">
              <Star size={16} className="text-yellow-400 fill-current mr-1" />
              <span>{selectedCourse.rating}</span>
            </div>
            <div className="flex items-center">
              <User size={16} className="text-gray-500 mr-1" />
              <span>{selectedCourse.enrolled.toLocaleString()} students</span>
            </div>
            <div className="flex items-center">
              <Clock size={16} className="text-gray-500 mr-1" />
              <span>{selectedCourse.duration}</span>
            </div>
          </div>
          
          <div className="bg-blue-50 rounded-lg p-4 mt-6">
            <div className="flex items-center justify-between mb-2">
              <span className="font-medium">Your Progress</span>
              <span className="text-blue-500 font-medium">{calculateCourseProgress(selectedCourse.id)}%</span>
            </div>
            <div className="w-full bg-gray-200 rounded-full h-2.5">
              <div 
                className="bg-blue-500 h-2.5 rounded-full" 
                style={{ width: `${calculateCourseProgress(selectedCourse.id)}%` }}
              ></div>
            </div>
          </div>
          
          <div className="mt-6">
            <h2 className="text-lg font-semibold mb-4">About this course</h2>
            <p className="text-gray-600">{selectedCourse.description}</p>
          </div>
          
          <div className="mt-6">
            <h2 className="text-lg font-semibold mb-4">Course Content</h2>
            <div className="space-y-3">
              {lessons
                .filter(lesson => lesson.courseId === selectedCourse.id)
                .map(lesson => (
                  <div 
                    key={lesson.id}
                    className="bg-white border border-gray-200 rounded-lg p-4 cursor-pointer"
                    onClick={() => handleLessonSelect(lesson)}
                  >
                    <div className="flex items-start">
                      <div className="relative mr-3 flex-shrink-0">
                        <img 
                          src={lesson.thumbnail} 
                          alt={lesson.title} 
                          className="w-20 h-14 object-cover rounded-md" 
                        />
                        {lesson.type === 'video' && (
                          <div className="absolute inset-0 flex items-center justify-center">
                            <div className="bg-black bg-opacity-50 rounded-full p-1">
                              <Play size={12} className="text-white" />
                            </div>
                          </div>
                        )}
                      </div>
                      <div className="flex-1">
                        <div className="flex items-start justify-between">
                          <h3 className="font-medium">{lesson.title}</h3>
                          {completedLessons.includes(lesson.id) ? (
                            <CheckCircle size={18} className="text-green-500 flex-shrink-0" />
                          ) : (
                            <span className="text-sm text-gray-500 flex-shrink-0">{lesson.duration}</span>
                          )}
                        </div>
                        <p className="text-sm text-gray-500 mt-1">{lesson.type.charAt(0).toUpperCase() + lesson.type.slice(1)}</p>
                      </div>
                    </div>
                  </div>
                ))
              }
            </div>
          </div>
        </div>
      </div>
    );
  };

  const LessonScreen = () => {
    if (!selectedLesson) return null;
    
    return (
      <div className="pb-20">
        <div className="relative bg-black">
          <div className="aspect-video bg-gray-800 relative">
            <img 
              src={selectedLesson.thumbnail} 
              alt={selectedLesson.title} 
              className="w-full h-full object-cover opacity-80" 
            />
            <div className="absolute inset-0 flex items-center justify-center">
              <Play size={48} className="text-white opacity-80" />
            </div>
            
            {/* Video progress bar */}
            <div className="absolute bottom-0 left-0 right-0 h-1 bg-gray-700">
              <div 
                className="h-full bg-red-500" 
                style={{ width: `${videoProgress}%` }}
              ></div>
            </div>
          </div>
          
          <button 
            className="absolute top-4 left-4 bg-black bg-opacity-50 text-white rounded-full p-2"
            onClick={() => setActiveScreen('courseDetail')}
          >
            <ArrowLeft size={20} />
          </button>
        </div>
        
        <div className="p-4">
          <h1 className="text-xl font-bold">{selectedLesson.title}</h1>
          <p className="text-gray-500 mt-1">{selectedLesson.duration}</p>
          
          <div className="flex space-x-2 mt-4 overflow-x-auto pb-2">
            <button className="px-4 py-2 bg-blue-500 text-white rounded-lg text-sm font-medium">Overview</button>
            <button className="px-4 py-2 bg-gray-100 text-gray-700 rounded-lg text-sm font-medium">Transcript</button>
            <button className="px-4 py-2 bg-gray-100 text-gray-700 rounded-lg text-sm font-medium">Notes</button>
            <button className="px-4 py-2 bg-gray-100 text-gray-700 rounded-lg text-sm font-medium">Resources</button>
            <button className="px-4 py-2 bg-gray-100 text-gray-700 rounded-lg text-sm font-medium">Discussion</button>
          </div>
          
          <div className="mt-6">
            <h2 className="font-medium mb-2">Description</h2>
            <p className="text-gray-600">{selectedLesson.description}</p>
          </div>
          
          <div className="mt-6">
            <h2 className="font-medium mb-3">Resources</h2>
            <div className="space-y-2">
              {selectedLesson.resources.map((resource, index) => (
                <div key={index} className="flex items-center bg-gray-50 p-3 rounded-lg">
                  <Download size={18} className="text-blue-500 mr-3" />
                  <span>{resource}</span>
                </div>
              ))}
            </div>
          </div>
          
          <div className="mt-6 bg-blue-50 p-4 rounded-lg">
            <h2 className="font-medium mb-2">Take Notes</h2>
            <textarea 
              className="w-full border border-gray-300 rounded-lg p-3 text-sm"
              placeholder="Write your notes here..."
              rows="3"
            ></textarea>
            <button className="bg-blue-500 text-white px-4 py-2 rounded-lg text-sm font-medium mt-2">
              Save Note
            </button>
          </div>
          
          <div className="mt-6 flex space-x-3">
            <button className="flex-1 flex items-center justify-center bg-gray-100 py-3 rounded-lg">
              <ChevronLeft size={20} className="mr-1" />
              <span>Previous</span>
            </button>
            <button 
              className="flex-1 flex items-center justify-center bg-blue-500 text-white py-3 rounded-lg"
              onClick={() => {
                // Find next lesson
                const currentLessons = lessons.filter(l => l.courseId === selectedLesson.courseId);
                const currentIndex = currentLessons.findIndex(l => l.id === selectedLesson.id);
                if (currentIndex < currentLessons.length - 1) {
                  handleLessonSelect(currentLessons[currentIndex + 1]);
                } else {
                  setActiveScreen('courseDetail');
                }
              }}
            >
              <span>Next Lesson</span>
              <ChevronRight size={20} className="ml-1" />
            </button>
          </div>
        </div>
      </div>
    );
  };

  const Sidebar = () => (
    <div className={`fixed top-0 left-0 w-64 bg-white h-full shadow-lg transition-transform transform z-30 ${sidebarOpen ? 'translate-x-0' : '-translate-x-full'}`}>
      <div className="p-4 border-b flex justify-between items-center">
        <h2 className="font-bold text-blue-500 text-xl">LearnSphere</h2>
        <button onClick={() => setSidebarOpen(false)}>
          <X size={24} />
        </button>
      </div>
      
      <div className="p-4">
        <div className="flex items-center space-x-3 mb-6">
          <div className="w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center">
            <User size={20} className="text-blue-500" />
          </div>
          <div>
            <p className="font-medium">Alex Taylor</p>
            <p className="text-sm text-gray-500">Pro Member</p>
          </div>
        </div>
        
        <div className="space-y-1">
          <button className="flex items-center space-x-3 w-full px-3 py-2 rounded-lg bg-blue-50 text-blue-500">
            <Home size={20} />
            <span>Home</span>
          </button>
          <button className="flex items-center space-x-3 w-full px-3 py-2 rounded-lg text-gray-600 hover:bg-gray-100">
            <BookOpen size={20} />
            <span>My Courses</span>
          </button>
          <button className="flex items-center space-x-3 w-full px-3 py-2 rounded-lg text-gray-600 hover:bg-gray-100">
            <Search size={20} />
            <span>Browse</span>
          </button>
          <button className="flex items-center space-x-3 w-full px-3 py-2 rounded-lg text-gray-600 hover:bg-gray-100">
            <Award size={20} />
            <span>Achievements</span>
          </button>
          <button className="flex items-center space-x-3 w-full px-3 py-2 rounded-lg text-gray-600 hover:bg-gray-100">
            <BarChart2 size={20} />
            <span>Progress</span>
          </button>
          <button className="flex items-center space-x-3 w-full px-3 py-2 rounded-lg text-gray-600 hover:bg-gray-100">
            <MessageSquare size={20} />
            <span>Discussion</span>
          </button>
          <button className="flex items-center space-x-3 w-full px-3 py-2 rounded-lg text-gray-600 hover:bg-gray-100">
            <User size={20} />
            <span>Profile</span>
          </button>
        </div>
      </div>
    </div>
  );

  const Navigation = () => (
    <div className="fixed bottom-0 left-0 right-0 bg-white border-t flex justify-around p-2 z-20">
      <button 
        onClick={() => setActiveScreen('home')}
        className={`p-2 flex flex-col items-center ${activeScreen === 'home' ? 'text-blue-500' : 'text-gray-500'}`}
      >
        <Home size={20} />
        <span className="text-xs mt-1">Home</span>
      </button>
      <button 
        className="p-2 flex flex-col items-center text-gray-500"
      >
        <Search size={20} />
        <span className="text-xs mt-1">Search</span>
      </button>
      <button 
        className={`p-2 flex flex-col items-center ${activeScreen === 'courseDetail' || activeScreen === 'lesson' ? 'text-blue-500' : 'text-gray-500'}`}
      >
        <BookOpen size={20} />
        <span className="text-xs mt-1">Courses</span>
      </button>
      <button 
        className="p-2
